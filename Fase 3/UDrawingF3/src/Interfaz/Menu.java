/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;

import Estructuras.*;
import Hash.*;
import Recursos.*;
import Recursos.TbHash;
import UDrawing.Main;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author DELL
 */
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    public Menu() {
        super("Usuario");
        initComponents();
        setLocationRelativeTo(null);
        //lblDestinoID.setText(String.valueOf(Main.actual.getIdMuni()));
        //lblClienteF.setText(Main.actual.getNombre());
        
        String timeStamp = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(Calendar.getInstance().getTime());
        lblFecha.setText(timeStamp);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        btnMod = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboSucursal = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        comboMensajero = new javax.swing.JComboBox<>();
        lblDestinoID = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblClienteF = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("UDRAWING");

        btnMod.setText("Modificar Datos");
        btnMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Operacion de Entrega");

        jLabel2.setText("Sucursal:");

        comboSucursal.setToolTipText("");
        comboSucursal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSucursalActionPerformed(evt);
            }
        });

        jLabel4.setText("Destino:");

        jLabel5.setText("Mensajero:");

        comboMensajero.setToolTipText("");

        lblDestinoID.setBackground(new java.awt.Color(204, 204, 204));
        lblDestinoID.setText("jLabel6");

        jLabel7.setText("Fecha:");

        lblFecha.setBackground(new java.awt.Color(204, 204, 204));
        lblFecha.setText("jLabel8");

        jLabel6.setText("Cliente:");

        lblClienteF.setText("jLabel8");

        jButton1.setText("Entregar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6))
                .addGap(31, 31, 31)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboMensajero, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDestinoID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblFecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblClienteF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboSucursal, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 95, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(comboMensajero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lblDestinoID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(lblFecha))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(lblClienteF))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jButton2.setText("Salir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnMod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnMod)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModActionPerformed
        // TODO add your handling code here:
        ModCliente actual = new ModCliente();
        actual.llenarlo(Main.actual.getDpi(), Main.actual.getNombre(), Main.actual.getUsuario(), Main.actual.getCorreo(), Main.actual.getContraseña(), Main.actual.getTelefono(), Main.actual.getDireccion(), Main.actual.getIdMuni());
        actual.setVisible(true);
    }//GEN-LAST:event_btnModActionPerformed

    private void comboSucursalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSucursalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboSucursalActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DateTimeFormatter fe = DateTimeFormatter.ofPattern("dd-MM-yy::HH:mm:ss");
        if(comboSucursal.getSelectedItem() == null || comboMensajero.getSelectedItem() == null){
            JOptionPane.showMessageDialog(null, "No Suficientes Datos.","Cliente",JOptionPane.ERROR_MESSAGE);
        }else{
            
            String sucursal = comboSucursal.getSelectedItem()+"";
            String mensajero = comboMensajero.getSelectedItem()+"";
            
            String[] ids = sucursal.split("\\.");         
            String[] idm = mensajero.split("-");
            
            int idsuc = Integer.parseInt(ids[0]);
            long dpim = Long.parseLong(idm[1].substring(1));
            
            String sede = "";
            for(Lugar lug :Main.lugares){
                if(lug.getId() == idsuc){
                    sede = lug.getNombre() + ", " + lug.getDepartamento();
                }
            }
             
            String men = "";
            for (Mensajero mm : Main.mensajeros) {
                if(mm!=null){
                   if(mm.getDpi()==dpim){
                        men = mm.getNombres()+ mm.getApellidos();
                        mm.entregar();
                    } 
                }          
            }
            String hora = fe.format(LocalDateTime.now());
            String solicitud = sede+Main.actual.getDireccion()+hora+Main.actual.getNombre()+men;
            Main.arbol.agregar(solicitud);
            Entrega nentrega = new Entrega(sede,Main.actual.getDireccion(),hora,Main.actual.getNombre(),men);
            Main.entregas.add(nentrega);
            for(Cliente cliente :Main.clientesC){
                if(cliente.getDpi()==Main.actual.getDpi()){
                    cliente.solicitar();
                    Main.actual = cliente;
                    break;
                }
            }
            JOptionPane.showMessageDialog(null, "Solicitud realizada correctamente","Cliente",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Inicio in = new Inicio();
        in.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMod;
    public static javax.swing.JComboBox<String> comboMensajero;
    public static javax.swing.JComboBox<String> comboSucursal;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    public static javax.swing.JLabel lblClienteF;
    public static javax.swing.JLabel lblDestinoID;
    private javax.swing.JLabel lblFecha;
    // End of variables declaration//GEN-END:variables

    public void cargar_cliente(File archivo) {
        try {
            JSONParser parser = new JSONParser();
            Scanner le = new Scanner(archivo);
            String linea = "";
            while (le.hasNextLine()) {
                linea += le.nextLine() + "\n";
            }
            Object ob = parser.parse(linea);
            JSONArray array = (JSONArray) ob;
            JSONObject job;
            for (int i = 0; i < array.size(); i++) {
                System.out.println("* * C L I E N T E * *");
                job = (JSONObject) array.get(i);
                String dpi = job.get("dpi").toString();
                String name = job.get("nombre_completo").toString();
                String user = job.get("nombre_usuario").toString();
                String mail = job.get("correo").toString();
                String pass = job.get("contraseña").toString();
                String phone = job.get("telefono").toString();
                String address = job.get("direccion").toString();
                String id_Muni = job.get("id_Municipio").toString();
                System.out.println("Numero cliente: " + (i + 1));
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void cargar_lugares(File archivo) {
        try {
            JSONParser parser = new JSONParser();
            FileReader leido = new FileReader(archivo);
            Object ob = parser.parse(leido);
            JSONObject js = (JSONObject) ob;
            String key = "";
            JSONObject job;
            key = "" + js.get("Lugares");
            Object obj = parser.parse(key);
            JSONArray array = (JSONArray) obj;
            //System.out.println("Tamaño: " + array.size());
            for (int i = 0; i < array.size(); i++) {
                System.out.println("-----**LUGAR**------");
                job = (JSONObject) array.get(i);
                String id = job.get("id").toString();
                String name = job.get("nombre").toString();
                String depa = job.get("departamento").toString();
                String sucursal = job.get("sn_sucursal").toString();
                System.out.println("Departamento: " + depa + ", Nombre: " + name + ", Sucursal: " + sucursal);
                System.out.println("No." + (i + 1));

                System.out.println("");
                
                if (sucursal.equals("si")) {
                    comboSucursal.addItem(""+depa+", "+ name);
                } else {
                }
                
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void cargar_mensajeros(File archivo) throws FileNotFoundException, ParseException {
        Scanner le = new Scanner(archivo);
        String linea = "";
        while (le.hasNextLine()) {
            linea += le.nextLine() + "\n";
        }
        JSONParser parser = new JSONParser();
        Object ob = parser.parse(linea);
        JSONArray array = (JSONArray) ob;
        JSONObject job;
        String dpi = "", nombres = "", apellidos = "", licencia = "", genero = "", direccion = "", telefono = "";
        //TablaHash tb = new TablaHash(array.size());
        //TbHash hh = new TbHash(array.size());
        Tabla tttt = new Tabla(array.size());
        
        for (int i = 0; i < array.size(); i++) {
            System.out.println("* * M E N S A J E R O S * *");
            job = (JSONObject) array.get(i);
            dpi = job.get("dpi").toString();
            nombres = job.get("nombres").toString();
            apellidos = job.get("apellidos").toString();
            licencia = job.get("tipo_licencia").toString();
            genero = job.get("genero").toString();
            direccion = job.get("direccion").toString();
            telefono = job.get("telefono").toString();
            BigInteger dp = new BigInteger(dpi);
            

            System.out.println("Nombre: " + nombres + ", Licencia Tipo:" + licencia);
            System.out.println("Numero Mensajero: " + (i + 1));

            Mensajero n = new Mensajero(Long.parseLong(dpi), nombres, apellidos, licencia, genero, telefono, direccion);
            Men nn = new Men(dp, nombres, apellidos, licencia, genero, telefono, direccion);

            comboMensajero.addItem(""+nombres+" "+ apellidos);
            //tb.insertar(dp, n);
            //tttt.add(nn);

        }
        
        
    }

    public void cargar_rutas(File archivo) {
        try {
            JSONParser parser = new JSONParser();
            FileReader read = new FileReader(archivo);
            Object ob = parser.parse(read);
            JSONObject js = (JSONObject) ob;
            String key = "";
            JSONObject job;
            key = "" + js.get("Grafo");
            Object obj = parser.parse(key);
            JSONArray array = (JSONArray) obj;
            System.out.println("Tamaño: " + array.size());

            Routes rut = new Routes();
            //ListaAdyacencia la = new ListaAdyacencia(array.size());

            for (int i = 0; i < array.size(); i++) {
                System.out.println("* * R U T A * *");
                job = (JSONObject) array.get(i);
                String inicio = job.get("inicio").toString();
                String fin = job.get("final").toString();
                String peso = job.get("peso").toString();

                System.out.println("Inicio: " + inicio + ", Final: " + fin + ", Peso: " + peso);
                System.out.println("Numero Lugar: " + (i + 1));

                rut.addRoutes(Integer.parseInt(inicio), Integer.parseInt(fin), Integer.parseInt(peso));
                //System.out.println("CARGADO");
                //la.insertaArista(Integer.parseInt(inicio), Integer.parseInt(fin), Integer.parseInt(peso));
            }
            //rut.createGrafoMap("Admin");
            //la.impMatrix();
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public static String leer() {
        int n = 0;
        Scanner entrada = null;
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(fileChooser);
        String t = "";
        try {
            String ruta = fileChooser.getSelectedFile().getAbsolutePath();
            File f = new File(ruta);
            entrada = new Scanner(f);
            while (entrada.hasNext()) {
                if (n == 0) {
                    t += entrada.nextLine();
                } else {
                    t += "\n" + entrada.nextLine();
                }
                n += 1;
            }
            return t;
        } catch (FileNotFoundException e) {
            System.out.println(e.getMessage());
        } catch (NullPointerException e) {
            System.out.println("No se ha seleccionado ningún fichero");
        } catch (Exception e) {
            System.out.println(e.getMessage());
        } finally {
            if (entrada != null) {
                entrada.close();
            }
        }
        return "";
    }

    public void analizarRutas() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(fileChooser);
        String ruta = fileChooser.getSelectedFile().getAbsolutePath();
        File f = new File(ruta);
        cargar_rutas(f);
        //JOptionPane.showMessageDialog(null, "Rutas Generados Correctamente.", Main.actual.getUsuario(), JOptionPane.INFORMATION_MESSAGE);
    }

    public void analizarLugares() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(fileChooser);
        String ruta = fileChooser.getSelectedFile().getAbsolutePath();
        File f = new File(ruta);
        cargar_lugares(f);
        //JOptionPane.showMessageDialog(null, "Lugares Generados Correctamente.", Main.actual.getUsuario(), JOptionPane.INFORMATION_MESSAGE);
    }

    public void analizarMensajeros() throws FileNotFoundException, ParseException {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(fileChooser);
        String ruta = fileChooser.getSelectedFile().getAbsolutePath();
        File f = new File(ruta);
        cargar_mensajeros(f);
        //JOptionPane.showMessageDialog(null, "Mensajeros Generados Correctamente.", Main.actual.getUsuario(), JOptionPane.INFORMATION_MESSAGE);
    }

}
