/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;

import Estructuras.*;
import Recursos.Cliente;
import UDrawing.Main;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author DELL
 */
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    public Menu() {
        super("Cliente");
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setText("UDRAWING");

        jButton1.setText("Clientes");

        jButton2.setText("Lugares");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Mensajeros");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Rutas");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton3)
                            .addComponent(jButton4)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(jLabel3)))
                .addContainerGap(177, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addContainerGap(114, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        analizarLugares();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        analizarRutas();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            // TODO add your handling code here:
            analizarMensajeros();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    public void cargar_cliente(File archivo) {
        try {
            JSONParser parser = new JSONParser();
            Scanner le = new Scanner(archivo);
            String linea = "";
            while (le.hasNextLine()) {
                linea += le.nextLine() + "\n";
            }
            Object ob = parser.parse(linea);
            JSONArray array = (JSONArray) ob;
            JSONObject job;
            for (int i = 0; i < array.size(); i++) {
                System.out.println("* * C L I E N T E * *");
                job = (JSONObject) array.get(i);
                String dpi = job.get("dpi").toString();
                String name = job.get("nombre_completo").toString();
                String user = job.get("nombre_usuario").toString();
                String mail = job.get("correo").toString();
                String pass = job.get("contraseña").toString();
                String phone = job.get("telefono").toString();
                String address = job.get("direccion").toString();
                String id_Muni = job.get("id_Municipio").toString();
                System.out.println("Numero cliente: " + (i + 1));
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void cargar_lugares(File archivo) {
        try {
            JSONParser parser = new JSONParser();
            FileReader leido = new FileReader(archivo);
            Object ob = parser.parse(leido);
            JSONObject js = (JSONObject) ob;
            String key = "";
            JSONObject job;
            key = "" + js.get("Lugares");
            Object obj = parser.parse(key);
            JSONArray array = (JSONArray) obj;
            System.out.println("Tamaño: " + array.size());
            for (int i = 0; i < array.size(); i++) {
                System.out.println("-----Lugar------");
                job = (JSONObject) array.get(i);
                String id = job.get("id").toString();
                String name = job.get("nombre").toString();
                String depa = job.get("departamento").toString();
                String sucursal = job.get("sn_sucursal").toString();
                System.out.println("Departamento: " + depa + ", Nombre: " + name + ", Sucursal: " + sucursal);
                System.out.println("No." + (i + 1));
                
                System.out.println("");
                
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void cargar_mensajeros(File archivo) throws FileNotFoundException, ParseException {
        Scanner le = new Scanner(archivo);
        String linea = "";
        while (le.hasNextLine()) {
            linea += le.nextLine() + "\n";
        }
        JSONParser parser = new JSONParser();
        Object ob = parser.parse(linea);
        JSONArray array = (JSONArray) ob;
        JSONObject job;
        String dpi = "", names = "", lastnames = "", license = "", gender = "", address = "", phone = "";
        for (int i = 0; i < array.size(); i++) {
            System.out.println("* * M E N S A J E R O S * *");
            job = (JSONObject) array.get(i);
            dpi = job.get("dpi").toString();
            names = job.get("nombres").toString();
            lastnames = job.get("apellidos").toString();
            license = job.get("tipo_licencia").toString();
            gender = job.get("genero").toString();
            address = job.get("direccion").toString();
            phone = job.get("telefono").toString();
            
            System.out.println("Nombre: " + names + ", Licencia Tipo:" + license);
            System.out.println("Numero Mensajero: " + (i + 1));
        }
    }

    public void cargar_rutas(File archivo) {
        try {
            JSONParser parser = new JSONParser();
            FileReader read = new FileReader(archivo);
            Object ob = parser.parse(read);
            JSONObject js = (JSONObject) ob;
            String key = "";
            JSONObject job;
            key = "" + js.get("Grafo");
            Object obj = parser.parse(key);
            JSONArray array = (JSONArray) obj;
            System.out.println("Tamaño: " + array.size());
            Routes rut = new Routes();
            for (int i = 0; i < array.size(); i++) {
                System.out.println("* * R U T A * *");
                job = (JSONObject) array.get(i);
                String inicio = job.get("inicio").toString();
                String fin = job.get("final").toString();
                String peso = job.get("peso").toString();

                System.out.println("Inicio: " + inicio + ", Final: " + fin + ", Peso: " + peso);
                System.out.println("Numero Lugar: " + (i + 1));

                
                rut.addRoutes(Integer.parseInt(inicio), Integer.parseInt(fin), Integer.parseInt(peso));
                //System.out.println("CARGADO");
            }
            //rut.createGrafoMap("Admin");
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public static String leer() {
        int n = 0;
        Scanner entrada = null;
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(fileChooser);
        String t = "";
        try {
            String ruta = fileChooser.getSelectedFile().getAbsolutePath();
            File f = new File(ruta);
            entrada = new Scanner(f);
            while (entrada.hasNext()) {
                if (n == 0) {
                    t += entrada.nextLine();
                } else {
                    t += "\n" + entrada.nextLine();
                }
                n += 1;
            }
            return t;
        } catch (FileNotFoundException e) {
            System.out.println(e.getMessage());
        } catch (NullPointerException e) {
            System.out.println("No se ha seleccionado ningún fichero");
        } catch (Exception e) {
            System.out.println(e.getMessage());
        } finally {
            if (entrada != null) {
                entrada.close();
            }
        }
        return "";
    }

    public void analizarRutas() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(fileChooser);
        String ruta = fileChooser.getSelectedFile().getAbsolutePath();
        File f = new File(ruta);
        cargar_rutas(f);
    }
    
    public void analizarLugares() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(fileChooser);
        String ruta = fileChooser.getSelectedFile().getAbsolutePath();
        File f = new File(ruta);
        cargar_lugares(f);
    }
    
    public void analizarMensajeros() throws FileNotFoundException, ParseException {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(fileChooser);
        String ruta = fileChooser.getSelectedFile().getAbsolutePath();
        File f = new File(ruta);
        cargar_mensajeros(f);
    }
    
    
    
    

}
